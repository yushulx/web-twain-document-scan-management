@page "/"
@inject IJSRuntime JSRuntime

<div id="container"></div>

@code {
    private DotNetObjectReference<Home> objRef;

    protected override void OnInitialized()
    {
        objRef = DotNetObjectReference.Create(this);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeCaptureViewer", objRef);
        }
    }

    [JSInvokable("SavePdfFromBlob")]
    public async void SavePdfFromBlob(string base64String)
    {
        if (!string.IsNullOrEmpty(base64String))
        {
            byte[] imageBytes = Convert.FromBase64String(base64String);
            string filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), GenerateFilename());

            try
            {
                await File.WriteAllBytesAsync(filePath, imageBytes);
                await JSRuntime.InvokeVoidAsync("displayAlert", $"Image saved to {filePath}");
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("displayAlert", $"Error saving image: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("Failed to fetch the image.");
        }
    }

    private static string GenerateFilename()
    {
        DateTime now = DateTime.Now;
        string timestamp = now.ToString("yyyyMMdd_HHmmss");
        return $"{timestamp}.pdf";
    }
}